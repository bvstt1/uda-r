x_inicial <- c(4, 4)
points(x_inicial[1], x_inicial[2],
pch = 20, col="red")
optimx(par = x_inicial,
fn = f,
method = lista_metodos)
contour(x, y, z, nlevels = 10)
par(mar = c(4,4,1,1))
x_inicial <- c(4, 4)
points(x_inicial[1], x_inicial[2],
pch = 20, col="red")
optimx(par = x_inicial,
fn = f,
method = lista_metodos)
par(mar = c(4,4,1,1))
contour(x, y, z, nlevels = 10)
points(x_inicial[1], x_inicial[2],
pch = 20, col="red")
points(res$p1, res$p2,
pch = 20, col ="green")
res <- optimx(par = x_inicial,
fn = f,
method = lista_metodos)
points(res$p1, res$p2,
pch = 20, col ="green")
points
## 1 ##################################################
library(readxl)
setwd("C:/Users/Basti/Desktop/proyectos/UDA/uda-r/formacion 3")
#setwd("C:/Users/Basti/Desktop/proyectos/UDA/uda-r/formacion 3")
setwd("/home/miitsuki/Escritorio/Proyectos/UDA - r/formacion 3")
## 1 ##################################################
library(readxl)
#setwd("C:/Users/Basti/Desktop/proyectos/UDA/uda-r/formacion 3")
setwd("/home/miitsuki/Escritorio/Proyectos/UDA - r/formacion 3")
bd_programadores <- read_excel("bd_programadores.xlsx")
str(bd_programadores)
# Variables cualitativas
# Nominales: genero - lenguaje_preferido
# Ordinales: nivel_educativo
# Variables cuantitativas
# Discretas: Edad - horas_trabajo_semanal - proyectos_realizados
# - salario_mensual - experiencia
bd_programadores$genero <- as.factor(bd_programadores$genero)
bd_programadores$lenguaje_preferido <- as.factor(bd_programadores$lenguaje_preferido)
bd_programadores$nivel_educativo <- as.factor(bd_programadores$nivel_educativo)
tabla_genero <- table(bd_programadores$genero)
prop_genero <- prop.table(tabla_genero)
percent_genero <- prop_genero * 100
tabla_lp <- table(bd_programadores$lenguaje_preferido)
prop_lp <- prop.table(tabla_lp)
percent_lp <- prop_lp * 100
tabla_ne <- table(bd_programadores$nivel_educativo)
prop_ne <- prop.table(tabla_ne)
percent_ne <- prop_ne * 100
# Graficos de barras
colores_genero <- c("pink", "lightblue")
colores_lp <- c("orange", "green", "blue", "purple", "red")
colores_ne <- c("gray", "lightgreen", "skyblue", "salmon")
barplot(tabla_genero, col = colores_genero,
main = "Distribución por genero",
ylab = "Frecuencia",)
# Media por genero
media_f <- mean(salario_mensual[genero == "Femenino"])
salario_mensual <- bd_programadores$salario_mensual
genero <- bd_programadores$genero
# Media por genero
media_f <- mean(salario_mensual[genero == "Femenino"])
# Mediana por genero
mediana_f <- median(salario_mensual[genero == "Femenino"])
media_f
mediana_f
# Rango
range_m <- range(salario_mensual[genero == "Masculino"])
# Rango
range_m <- diff(range(salario_mensual[genero == "Masculino"]))
range_m
range_f <- diff(range(salario_mensual[genero == "Femenino"]))
range_f
# Varianza
var_m <- var(salario_mensual[genero == "Masculino"])
var_f <- var(salario_mensual[genero == "Femenino"])
var_m
var_f
ggplot(bd_programadores, aes(x = salario_mensual, fill = genero)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15) +
facet_wrap(~ genero) +
labs(title = "Histograma de salario mensual por género",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
ggplot(bd_programadores, aes(x = salario_mensual, fill = genero)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15) +
facet_wrap(~ genero) +
labs(title = "Histograma de salario mensual por género",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
library(ggplot2)
## 1 ##################################################
library(readxl)
library(ggplot2)
#setwd("C:/Users/Basti/Desktop/proyectos/UDA/uda-r/formacion 3")
setwd("/home/miitsuki/Escritorio/Proyectos/UDA - r/formacion 3")
bd_programadores <- read_excel("bd_programadores.xlsx")
str(bd_programadores)
# Variables cualitativas
# Nominales: genero - lenguaje_preferido
# Ordinales: nivel_educativo
# Variables cuantitativas
# Discretas: Edad - horas_trabajo_semanal - proyectos_realizados
# - salario_mensual - experiencia
bd_programadores$genero <- as.factor(bd_programadores$genero)
bd_programadores$lenguaje_preferido <- as.factor(bd_programadores$lenguaje_preferido)
bd_programadores$nivel_educativo <- as.factor(bd_programadores$nivel_educativo)
tabla_genero <- table(bd_programadores$genero)
prop_genero <- prop.table(tabla_genero)
percent_genero <- prop_genero * 100
tabla_lp <- table(bd_programadores$lenguaje_preferido)
prop_lp <- prop.table(tabla_lp)
percent_lp <- prop_lp * 100
tabla_ne <- table(bd_programadores$nivel_educativo)
prop_ne <- prop.table(tabla_ne)
percent_ne <- prop_ne * 100
# Graficos de barras
colores_genero <- c("pink", "lightblue")
colores_lp <- c("orange", "green", "blue", "purple", "red")
colores_ne <- c("gray", "lightgreen", "skyblue", "salmon")
barplot(tabla_genero, col = colores_genero,
main = "Distribución por genero",
ylab = "Frecuencia",)
x11()
ggplot(bd_programadores, aes(x = salario_mensual, fill = genero)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15) +
facet_wrap(~ genero) +
labs(title = "Histograma de salario mensual por género",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
ggplot(bd_programadores, aes(x = salario_mensual, fill = genero)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15) +
facet_wrap(~ genero) +
geom_vline(data = resumen_salario,
aes(xintercept = media, color = genero),
linetype = "dashed", size = 1) +
labs(title = "Histograma de salario mensual por género con medias",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
library(dplyr)
install.packages("dplyr")
library(dplyr)
resumen_salario <- bd_programadores %>%
group_by(genero) %>%
summarise(
media = mean(salario_mensual, na.rm = TRUE),
desviacion = sd(salario_mensual, na.rm = TRUE)
)
print(resumen_salario)
print(resumen_salario)
ggplot(bd_programadores, aes(x = salario_mensual, fill = genero)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15) +
facet_wrap(~ genero) +
geom_vline(data = resumen_salario,
aes(xintercept = media, color = genero),
linetype = "dashed", size = 1) +
labs(title = "Histograma de salario mensual por género con medias",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
boxplot(salario_mensual ~ genero,
main = "Distribución del salario mensual por género",
xlab = "Género", ylab = "Salario mensual (CLP)",
col = c("pink", "lightblue"))
desv_f
# Desviación estandar por genero
desv_m <- sd(salario_mensual[genero == "Masculino"])
desv_f <- sd(salario_mensual[genero == "Femenino"])
desv_m
desv_f
# Rango
range_m <- diff(range(salario_mensual[genero == "Masculino"]))
range_f <- diff(range(salario_mensual[genero == "Femenino"]))
range_m
range_f
var_m
var_f
# Media por genero
media_f <- mean(salario_mensual[genero == "Femenino"])
media_f
mediana_f
var_f
mediana_m <- median(salario_mensual[genero == "Masculino"])
media_f
mediana_f
mediana_m
var_f
var_m
ggplot(bd_programadores, aes(x = salario_mensual, fill = genero)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15) +
facet_wrap(~ genero) +
labs(title = "Histograma de salario mensual por género",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
ggplot(bd_programadores, aes(x = salario_mensual, fill = genero)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15) +
facet_wrap(~ genero) +
labs(title = "Histograma de salario mensual por género",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
ggplot(bd_programadores, aes(x = salario_mensual, fill = genero)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15, color = "black") +
facet_wrap(~ genero) +
labs(title = "Histograma de salario mensual por género",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
ggplot(bd_programadores, aes(x = salario_mensual, fill = genero)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15, color = "black",
ill = "steelblue", color = "black", alpha = 0.8) +
facet_wrap(~ genero) +
labs(title = "Histograma de salario mensual por género",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
ggplot(bd_programadores, aes(x = salario_mensual, fill = genero)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15, color = "black",
ill = "steelblue", color = "black", alpha = 0.8) +
facet_wrap(~ genero) +
labs(title = "Histograma de salario mensual por género",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
boxplot(salario_mensual ~ genero,
main = "Distribución del salario mensual por género",
xlab = "Género", ylab = "Salario mensual (CLP)",
col = c("pink", "lightblue"))
# Histograma por lenguaje
ggplot(bd_programadores, aes(x = salario_mensual, fill = nivel_educativo)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15, color = "black",
ill = "steelblue", color = "black", alpha = 0.8) +
facet_wrap(~ nivel_educativo) +
labs(title = "Histograma de salario mensual por Nivel Educativo",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
# Boxplot por lenguaje
boxplot(salario_mensual ~ nivel_educativo,
data = bd_programadores,
main = "Salario mensual según Nivel Educativo",
xlab = "Nivel educativo", ylab = "Salario mensual (CLP)",
col = "lightblue", las = 2)
# Histograma por lenguaje
ggplot(bd_programadores, aes(x = salario_mensual, fill = nivel_educativo)) +
geom_histogram(position = "identity", alpha = 0.6, bins = 15, color = "black",
ill = "steelblue", color = "black", alpha = 0.8) +
facet_wrap(~ nivel_educativo) +
labs(title = "Histograma de salario mensual por Nivel Educativo",
x = "Salario mensual (CLP)", y = "Frecuencia") +
theme_minimal()
library(e1071)
minerales <- read.table("minerales.txt", header = TRUE)
head(minerales)
minerales <- minerales[, -1]  # Elimina la primera columna
# Ver estructura
str(minerales)
# Calcular la media de cada columna (cada mineral)
medias <- colMeans(minerales)
# Ordenar de mayor a menor
medias_ordenadas <- sort(medias, decreasing = TRUE)
# Mostrar resultado
print(round(medias_ordenadas, 2))
maximo <- medias[which.max(medias)]
maximo
################################
# Calcular skewness
asimetria <- apply(minerales, 2, skewness)
# Mostrar ordenado por simetría (más cercana a 0)
asimetria_ordenada <- sort(abs(asimetria))
print(asimetria_ordenada)
# Nombre del mineral más simétrico
nombre_mas_simetrico <- names(asimetria_ordenada)[1]
# Valor de skewness real (no absoluto)
valor_mas_simetrico <- asimetria[nombre_mas_simetrico]
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
######################################
# Calcular kurtosis
kurtosis <- apply(minerales, 2, kurtosis)
# Mostrar kurtosis
print(round(kurtosis, 2))
###########################################
tabla <- data.frame(
Mineral = names(asimetria),
Skewness = round(asimetria, 3),
Kurtosis = round(kurtosis, 3)
)
# Mostrar tabla ordenada por skewness (más simétrica)
tabla[order(abs(tabla$Skewness)), ]
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
maximo
maximo
medias_ordenadas
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
# Mostrar kurtosis
print(round(kurtosis, 2))
# Aplicar a cada variable
for (var in variables_cuantitativas) {
analizar_variable(var)
}
## 4 ##########################################
# Lista de variables cuantitativas
variables_cuantitativas <- c("edad", "horas_trabajo_semanal", "experiencia",
"proyectos_realizados", "salario_mensual")
# Función para calcular frecuencias observadas y evaluar Chebyshev
analizar_variable <- function(var) {
x <- bd_programadores[[var]]
media <- mean(x)
desv <- sd(x)
emp_1 <- mean(x >= (media - 1*desv) & x <= (media + 1*desv))
emp_2 <- mean(x >= (media - 2*desv) & x <= (media + 2*desv))
emp_3 <- mean(x >= (media - 3*desv) & x <= (media + 3*desv))
cheb_2 <- emp_2 >= 0.75
cheb_3 <- emp_3 >= 0.8889
cat("VARIABLE:", var, "\n")
cat("Media:", round(media, 2), "Desv.Est.:", round(desv, 2), "\n")
cat("±1 desviación:", round(emp_1 * 100, 2), "%\n")
cat("±2 desviaciones:", round(emp_2 * 100, 2), "% →",
ifelse(cheb_2, "Cumple Chebyshev", "No cumple"), "\n")
cat("±3 desviaciones:", round(emp_3 * 100, 2), "% →",
ifelse(cheb_3, "Cumple Chebyshev", "No cumple"), "\n\n")
}
# Aplicar a cada variable
for (var in variables_cuantitativas) {
analizar_variable(var)
}
boxplot(salario_mensual ~ genero,
main = "Distribución del salario mensual por género",
xlab = "Género", ylab = "Salario mensual (CLP)",
col = c("pink", "lightblue"))
correlaciones
## 7 ##############################################################
# Seleccionar solo las variables cuantitativas
datos_cuantitativos <- bd_programadores[, c("edad", "horas_trabajo_semanal", "experiencia",
"proyectos_realizados", "salario_mensual")]
# Matriz de correlación de Pearson
correlaciones <- cor(datos_cuantitativos)
print(correlaciones)
pairs(datos_cuantitativos,
main = "Matriz de dispersión entre variables cuantitativas",
pch = 19, col = "steelblue")
print(correlaciones)
pairs(datos_cuantitativos,
main = "Matriz de dispersión entre variables cuantitativas",
pch = 19, col = "steelblue")
pairs(datos_cuantitativos,
main = "Matriz de dispersión entre variables cuantitativas",
pch = 19, col = "steelblue")
rango_euro  <- range(indicador_banco$Valor_Euro, na.rm = TRUE)
## 2 ##################
library(readxl)
# Leer desde la segunda fila (omitimos la primera fila duplicada de encabezado)
indicador_banco <- read_excel("indicador_banco.xlsx", skip = 1)
# Renombrar columnas correctamente
colnames(indicador_banco) <- c("Dia", "Valor_Dolar", "Valor_Euro")
# Convertir fechas al formato correcto
indicador_banco$Dia <- as.Date(indicador_banco$Dia)
# Calcular rangos ignorando NA
rango_dolar <- range(indicador_banco$Valor_Dolar, na.rm = TRUE)
rango_euro  <- range(indicador_banco$Valor_Euro, na.rm = TRUE)
cat("Rango dólar:", diff(rango_dolar), "\n")
cat("Rango euro:", diff(rango_euro), "\n")
## 3 ############################
# Calcular desviaciones estándar (ignorando NA)
desv_dolar <- sd(indicador_banco$Valor_Dolar, na.rm = TRUE)
desv_euro  <- sd(indicador_banco$Valor_Euro, na.rm = TRUE)
cat("Desviación estándar del dólar:", round(desv_dolar, 4), "\n")
cat("Desviación estándar del euro:", round(desv_euro, 4), "\n")
## 4 #####################################
# Función para calcular rachas de subidas y bajadas consecutivas
max_racha <- function(serie) {
cambios <- diff(serie)
subidas <- rle(cambios > 0)
bajadas <- rle(cambios < 0)
max_subida <- max(subidas$lengths[subidas$values], na.rm = TRUE)
max_bajada <- max(bajadas$lengths[bajadas$values], na.rm = TRUE)
return(list(max_subida = max_subida, max_bajada = max_bajada))
}
# Aplicar a ambas monedas
racha_dolar <- max_racha(indicador_banco$Valor_Dolar)
racha_euro  <- max_racha(indicador_banco$Valor_Euro)
cat("Dólar: mayor subida consecutiva =", racha_dolar$max_subida,
"días | bajada consecutiva =", racha_dolar$max_bajada, "días\n")
cat("Euro: mayor subida consecutiva =", racha_euro$max_subida,
"días | bajada consecutiva =", racha_euro$max_bajada, "días\n")
## 5 ##############################################
# Correlación entre ambas monedas
correlacion <- cor(indicador_banco$Valor_Dolar, indicador_banco$Valor_Euro, use = "complete.obs")
cat("Coeficiente de correlación:", round(correlacion, 4), "\n")
cat("Rango dólar:", diff(rango_dolar), "\n")
cat("Rango euro:", diff(rango_euro), "\n")
cat("Dólar: mayor subida consecutiva =", racha_dolar$max_subida,
"días | bajada consecutiva =", racha_dolar$max_bajada, "días\n")
cat("Euro: mayor subida consecutiva =", racha_euro$max_subida,
"días | bajada consecutiva =", racha_euro$max_bajada, "días\n")
correlacion <- cor(indicador_banco$Valor_Dolar, indicador_banco$Valor_Euro, use = "complete.obs")
cat("Coeficiente de correlación:", round(correlacion, 4), "\n")
library(e1071)
minerales <- read.table("minerales.txt", header = TRUE)
head(minerales)
minerales <- minerales[, -1]  # Elimina la primera columna
# Ver estructura
str(minerales)
# Calcular la media de cada columna (cada mineral)
medias <- colMeans(minerales)
# Ordenar de mayor a menor
medias_ordenadas <- sort(medias, decreasing = TRUE)
# Mostrar resultado
print(round(medias_ordenadas, 2))
maximo <- medias[which.max(medias)]
maximo
################################
# Calcular skewness
asimetria <- apply(minerales, 2, skewness)
# Mostrar ordenado por simetría (más cercana a 0)
asimetria_ordenada <- sort(abs(asimetria))
print(asimetria_ordenada)
# Nombre del mineral más simétrico
nombre_mas_simetrico <- names(asimetria_ordenada)[1]
# Valor de skewness real (no absoluto)
valor_mas_simetrico <- asimetria[nombre_mas_simetrico]
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
######################################
# Calcular kurtosis
kurtosis <- apply(minerales, 2, kurtosis)
# Mostrar kurtosis
print(round(kurtosis, 2))
###########################################
tabla <- data.frame(
Mineral = names(asimetria),
Skewness = round(asimetria, 3),
Kurtosis = round(kurtosis, 3)
)
# Mostrar tabla ordenada por skewness (más simétrica)
tabla[order(abs(tabla$Skewness)), ]
# Ver estructura
str(minerales)
library(e1071)
minerales <- read.table("minerales.txt", header = TRUE)
head(minerales)
# Ver estructura
str(minerales)
# Calcular la media de cada columna (cada mineral)
medias <- colMeans(minerales)
minerales <- minerales[, -1]  # Elimina la primera columna (indice)
library(e1071)
minerales <- read.table("minerales.txt", header = TRUE)
head(minerales)
minerales <- minerales[, -1]  # Elimina la primera columna (indice)
# Ver estructura
str(minerales)
# Ver estructura
str(minerales)
# Calcular la media de cada columna (cada mineral)
medias <- colMeans(minerales)
# Ordenar de mayor a menor
medias_ordenadas <- sort(medias, decreasing = TRUE)
# Mostrar resultado
print(round(medias_ordenadas, 2))
maximo <- medias[which.max(medias)]
maximo
# Calcular skewness
asimetria <- apply(minerales, 2, skewness)
asimetria
# Mostrar ordenado por simetría (más cercana a 0)
asimetria_ordenada <- sort(abs(asimetria))
print(asimetria_ordenada)
# Nombre del mineral más simétrico
nombre_mas_simetrico <- names(asimetria_ordenada)[1]
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
# Mostrar tabla ordenada por skewness (más simétrica)
tabla[order(abs(tabla$Skewness)), ]
# Calcular kurtosis
kurtosis <- apply(minerales, 2, kurtosis)
# Mostrar kurtosis
print(round(kurtosis, 2))
print(asimetria_ordenada)
# Mostrar ordenado por simetría (más cercana a 0)
asimetria_ordenada <- sort(abs(asimetria))
# Mostrar tabla ordenada por skewness (más simétrica)
tabla[order(abs(tabla$Skewness)), ]
tabla <- data.frame(
Mineral = names(asimetria),
Skewness = round(asimetria, 3),
Kurtosis = round(kurtosis, 3)
)
# Mostrar kurtosis
print(round(kurtosis, 2))
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
# Mostrar kurtosis
print(round(kurtosis, 2))
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
# Valor de skewness real (no absoluto)
valor_mas_simetrico <- asimetria[nombre_mas_simetrico]
valor_mas_simetrico
print(asimetria_ordenada)
# Mostrar kurtosis
print(round(kurtosis, 2))
# Calcular la media de cada columna (cada mineral)
medias <- colMeans(minerales)
medias
print(asimetria_ordenada)
# Nombre del mineral más simétrico
nombre_mas_simetrico <- names(asimetria_ordenada)[1]
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
maximo
# Calcular la media de cada columna (cada mineral)
medias <- colMeans(minerales)
# Calcular la media de cada columna (cada mineral)
medias <- colMeans(minerales)
# Mostrar resultado
print(round(medias_ordenadas, 2))

El valor máximo de f(x, y) es: 1.922603
# EJERCICIO 4 - ENCONTRAR EL MAXIMO DE LA FUNCION - FUERZA BRUTA
#FUNCIÓN
f <- function(x){
return(sin(x[1]) + cos(x[2]) + 0.1 * x[1] * x[2])
}
step <- 0.5
x <- seq(from = -pi, to = pi, by = step)
y <- seq(from = -pi, to = pi, by = step)
dominio <- expand.grid(x, y)
z <- apply(dominio, 1, f) # cos sin tan
resultado <- as.matrix(cbind(dominio, z))
index_max <- which.max(resultado[, 3])
punto_max <- resultado[index_max, 1:2]
f_max <- resultado[index_max, 3]
# MOSTRAR RESULTADO
cat("El valor máximo de f(x, y) es:", f_max,
"\nEl punto óptimo (x, y) es:", punto_max)
# EJERCICIO 4 - ENCONTRAR EL MAXIMO DE LA FUNCION - FUERZA BRUTA
#FUNCIÓN
f <- function(x){
return(sin(x[1]) + cos(x[2]) + 0.1 * x[1] * x[2])
}
step <- 0.1
x <- seq(from = -pi, to = pi, by = step)
y <- seq(from = -pi, to = pi, by = step)
dominio <- expand.grid(x, y)
z <- apply(dominio, 1, f) # cos sin tan
resultado <- as.matrix(cbind(dominio, z))
index_max <- which.max(resultado[, 3])
punto_max <- resultado[index_max, 1:2]
f_max <- resultado[index_max, 3]
# MOSTRAR RESULTADO
cat("El valor máximo de f(x, y) es:", f_max,
"\nEl punto óptimo (x, y) es:", punto_max)
El valor máximo de f(x, y) es: 1.962673
# EJERCICIO 4 - ENCONTRAR EL MAXIMO DE LA FUNCION - FUERZA BRUTA
#FUNCIÓN
f <- function(x){
return(sin(x[1]) + cos(x[2]) + 0.1 * x[1] * x[2])
}
step <- 0.1
x <- seq(from = -pi, to = pi, by = step)
y <- seq(from = -pi, to = pi, by = step)
dominio <- expand.grid(x, y)
z <- apply(dominio, 1, f) # cos sin tan
resultado <- as.matrix(cbind(dominio, z))
index_max <- which.max(resultado[, 3])
punto_max <- resultado[index_max, 1:2]
f_max <- resultado[index_max, 3]
# MOSTRAR RESULTADO
cat("El valor máximo de f(x, y) es:", f_max,
"\nEl punto óptimo (x, y) es:", punto_max)
# EJERCICIO 4 - ENCONTRAR EL MAXIMO DE LA FUNCION - FUERZA BRUTA
#FUNCIÓN
f <- function(x){
return(sin(x[1]) + cos(x[2]) + 0.1 * x[1] * x[2])
}
step <- 0
x <- seq(from = -pi, to = pi, by = step)
# EJERCICIO 4 - ENCONTRAR EL MAXIMO DE LA FUNCION - FUERZA BRUTA
#FUNCIÓN
f <- function(x){
return(sin(x[1]) + cos(x[2]) + 0.1 * x[1] * x[2])
}
step <- 0.01
x <- seq(from = -pi, to = pi, by = step)
y <- seq(from = -pi, to = pi, by = step)
dominio <- expand.grid(x, y)
z <- apply(dominio, 1, f) # cos sin tan
resultado <- as.matrix(cbind(dominio, z))
index_max <- which.max(resultado[, 3])
punto_max <- resultado[index_max, 1:2]
f_max <- resultado[index_max, 3]
# MOSTRAR RESULTADO
cat("El valor máximo de f(x, y) es:", f_max,
"\nEl punto óptimo (x, y) es:", punto_max)
El valor máximo de f(x, y) es: 2.012089
# EJERCICIO 4 - ENCONTRAR EL MAXIMO DE LA FUNCION - FUERZA BRUTA
#FUNCIÓN
f <- function(x){
return(sin(x[1]) + cos(x[2]) + 0.1 * x[1] * x[2])
}
step <- 0.01
x <- seq(from = -pi, to = pi, by = step)
y <- seq(from = -pi, to = pi, by = step)
dominio <- expand.grid(x, y)
z <- apply(dominio, 1, f) # cos sin tan
resultado <- as.matrix(cbind(dominio, z))
index_max <- which.max(resultado[, 3])
punto_max <- resultado[index_max, 1:2]
f_max <- resultado[index_max, 3]
# MOSTRAR RESULTADO
cat("El valor máximo de f(x, y) es:", f_max,
"\nEl punto óptimo (x, y) es:", punto_max)
# EJERCICIO 4 - ENCONTRAR EL MAXIMO DE LA FUNCION - FUERZA BRUTA
#FUNCIÓN
f <- function(x){
return(sin(x[1]) + cos(x[2]) + 0.1 * x[1] * x[2])
}
step <- 0.01
x <- seq(from = -pi, to = pi, by = step)
y <- seq(from = -pi, to = pi, by = step)
dominio <- expand.grid(x, y)
z <- apply(dominio, 1, f) # cos sin tan
resultado <- as.matrix(cbind(dominio, z))
index_max <- which.max(resultado[, 3])
punto_max <- resultado[index_max, 1:2]
f_max <- resultado[index_max, 3]
# MOSTRAR RESULTADO
cat("El valor máximo de f(x, y) es:", f_max,
"\nEl punto óptimo (x, y) es:", punto_max)
# EJERCICIO 5 - ENCONTRAR EL MINIMO DE LA FUNCION - BUSQUEDA ALEATORIA
#FUNCION
f <- function(x){
return(x[1]^2 + x[2]^2 + x[3]^2 + cos(x[1] * x[2]* x[3]))
}
# PARÁMETROS
set.seed(14)
n <- 100
# VECTORIZACIÓN Y ANÁLISIS - DOMINIO CONTINUO
x <- runif(n, min = -2, max = 2)
y <- runif(n, min = -2, max = 2)
z <- runif(n, min = -2, max = 2)
dominio <- cbind(x, y, z)
valores <- apply(dominio, 1, f)
index_min <- which.min(valores)
punto_min <- dominio[index_min, ]
f_min <- valores[index_min]
cat("El valor mínimo de f(x, y, z) es:", f_min,
"\nEn el punto (x, y, z):", punto_min)
# EJERCICIO 5 - ENCONTRAR EL MINIMO DE LA FUNCION - BUSQUEDA ALEATORIA
#FUNCION
f <- function(x){
return(x[1]^2 + x[2]^2 + x[3]^2 + cos(x[1] * x[2]* x[3]))
}
# PARÁMETROS
set.seed(14)
n <- 1000
# VECTORIZACIÓN Y ANÁLISIS - DOMINIO CONTINUO
x <- runif(n, min = -2, max = 2)
y <- runif(n, min = -2, max = 2)
z <- runif(n, min = -2, max = 2)
dominio <- cbind(x, y, z)
valores <- apply(dominio, 1, f)
index_min <- which.min(valores)
punto_min <- dominio[index_min, ]
f_min <- valores[index_min]
cat("El valor mínimo de f(x, y, z) es:", f_min,
"\nEn el punto (x, y, z):", punto_min)
# EJERCICIO 5 - ENCONTRAR EL MINIMO DE LA FUNCION - BUSQUEDA ALEATORIA
#FUNCION
f <- function(x){
return(x[1]^2 + x[2]^2 + x[3]^2 + cos(x[1] * x[2]* x[3]))
}
# PARÁMETROS
set.seed(14)
n <- 10000
# VECTORIZACIÓN Y ANÁLISIS - DOMINIO CONTINUO
x <- runif(n, min = -2, max = 2)
y <- runif(n, min = -2, max = 2)
z <- runif(n, min = -2, max = 2)
dominio <- cbind(x, y, z)
valores <- apply(dominio, 1, f)
index_min <- which.min(valores)
punto_min <- dominio[index_min, ]
f_min <- valores[index_min]
cat("El valor mínimo de f(x, y, z) es:", f_min,
"\nEn el punto (x, y, z):", punto_min)
# EJERCICIO 2 - ENCONTRAR EL MAXIMO DE LA FUNCIÓN - FUERZA BRUTA
# FUNCIÓN
f <- function(x){
return(-x^3 + 4 * x^2 + 5)
}
# VECTORIZACIÓN Y ANÁLISIS - DOMINIO CONTINUO
step <- 1
x <- seq(from = 0, to = 5, by = step)
y <- f(x)
cbind(x,y)
index_max <- which.max(y)
x_max <- x[index_max]
y_max <- y[index_max]
# GRAFICO
par(mar = c(4,4,1,1))
plot(x,y, pch = 18)
points(x_max, y_max, pch = 19, col = "red")
# MENSAJE
cat("El valor maximo de la función es:", y_max,
"\nEl valor optimo de x es:", x_max)
# EJERCICIO 2 - ENCONTRAR EL MAXIMO DE LA FUNCIÓN - FUERZA BRUTA
# FUNCIÓN
f <- function(x){
return(-x^3 + 4 * x^2 + 5)
}
# VECTORIZACIÓN Y ANÁLISIS - DOMINIO CONTINUO
step <- 0.5
x <- seq(from = 0, to = 5, by = step)
y <- f(x)
cbind(x,y)
index_max <- which.max(y)
x_max <- x[index_max]
y_max <- y[index_max]
# GRAFICO
par(mar = c(4,4,1,1))
plot(x,y, pch = 18)
points(x_max, y_max, pch = 19, col = "red")
# MENSAJE
cat("El valor maximo de la función es:", y_max,
"\nEl valor optimo de x es:", x_max)
# EJERCICIO 2 - ENCONTRAR EL MAXIMO DE LA FUNCIÓN - FUERZA BRUTA
# FUNCIÓN
f <- function(x){
return(-x^3 + 4 * x^2 + 5)
}
# VECTORIZACIÓN Y ANÁLISIS - DOMINIO CONTINUO
step <- 0.1
x <- seq(from = 0, to = 5, by = step)
y <- f(x)
cbind(x,y)
index_max <- which.max(y)
x_max <- x[index_max]
y_max <- y[index_max]
# GRAFICO
par(mar = c(4,4,1,1))
plot(x,y, pch = 18)
points(x_max, y_max, pch = 19, col = "red")
# MENSAJE
cat("El valor maximo de la función es:", y_max,
"\nEl valor optimo de x es:", x_max)
maximo
minerales <- read.table("minerales.txt", header = TRUE)
library(readxl)
setwd("/home/miitsuki/Escritorio/Proyectos/UDA - r/formacion 3")
setwd("C:\Users\Basti\Desktop\proyectos\UDA\uda-r\formacion 3")
setwd("Users\Basti\Desktop\proyectos\UDA\uda-r\formacion 3")
library(readxl)
setwd("Users/Basti/Desktop/proyectos/UDA/uda-r/formacion 3")
bd_programadores <- read_excel("bd_programadores.xlsx")
library(readxl)
library(readxl)
bd_programadores <- read_excel("bd_programadores.xlsx")
bd_programadores <- read_excel("bd_programadores.xlsx")
setwd("C:/Users/Basti/Desktop/proyectos/UDA/uda-r/formacion 3")
bd_programadores <- read_excel("bd_programadores.xlsx")
bd_programadores <- read_excel("bd_programadores.xlsx")
library(readxl)
setwd("C:/Users/Basti/Desktop/proyectos/UDA/uda-r/formacion 3")
bd_programadores <- read_excel("bd_programadores.xlsx")
str(bd_programadores)
# Variables cualitativas
# Nominales: genero - lenguaje_preferido
# Ordinales: nivel_educativo
# Variables cuantitativas
# Discretas: Edad - horas_trabajo_semanal - proyectos_realizados
# - salario_mensual
bd_programadores$genero <- as.factor(bd_programadores$genero)
bd_programadores$lenguaje_preferido <- as.factor(bd_programadores$lenguaje_preferido)
bd_programadores$nivel_educativo <- as.factor(bd_programadores$nivel_educativo)
tabla_genero <- table(bd_programadores$genero)
prop_genero <- prop.table(tabla_genero)
percent_genero <- prop_genero * 100
tabla_lp <- table(bd_programadores$lenguaje_preferido)
prop_lp <- prop.table(tabla_lp)
percent_lp <- prop_lp * 100
tabla_ne <- table(bd_programadores$nivel_educativo)
prop_ne <- prop.table(tabla_ne)
percent_ne <- prop_ne * 100
# Graficos de barras
barplot(tabla_genero, col = "red",
main = "Distribución por genero",
ylab = "Frecuencia",)
barplot(tabla_lp, col = "red",
main = "Distribución por genero",
ylab = "Frecuencia")
orden <- c("Técnico", "Licenciado", "Magister", "Doctorado")
barplot(tabla_ne[orden], col = "red",
main = "Distribución por genero",
ylab = "Frecuencia")
# Graficos torta
pie(c(288, 712),
main = "Distribución por genero",
labels = c("Femenino", "Masculino"),
col = 2:4)
pie(c(109, 82, 104, 271, 434),
main = "Distribución por genero",
labels = c("C", "Java", "JavaScript", "Python", "R"),
col= 2:4)
pie(c(109, 82, 104, 271, 434),
main = "Distribución por genero",
labels = c("C", "Java", "JavaScript", "Python", "R"),
col= 2:4)
minerales <- read.table("minerales.txt", header = TRUE)
# Ver estructura
str(minerales)
# Calcular la media de cada columna (cada mineral)
medias <- colMeans(minerales)
# Ordenar de mayor a menor
medias_ordenadas <- sort(medias, decreasing = TRUE)
# Mostrar resultado
print(round(medias_ordenadas, 2))
maximo <- medias[which.max(medias)]
maximo
################################
maximo
head(minerales)
maximo
# Calcular skewness
asimetria <- apply(minerales, 2, skewness)
install.packages("e1071")
library(e1071)
library(e1071)
# Calcular skewness
asimetria <- apply(minerales, 2, skewness)
# Calcular kurtosis
kurtosis <- apply(minerales, 2, kurtosis)
# Mostrar ordenado por simetría (más cercana a 0)
asimetria_ordenada <- sort(abs(asimetria))
print(asimetria_ordenada)
# Mostrar kurtosis
print(round(kurtosis, 2))
# Mostrar tabla ordenada por skewness (más simétrica)
tabla[order(abs(tabla$Skewness)), ]
library(e1071)
minerales <- read.table("minerales.txt", header = TRUE)
head(minerales)
# Ver estructura
str(minerales)
# Calcular la media de cada columna (cada mineral)
medias <- colMeans(minerales)
# Ordenar de mayor a menor
medias_ordenadas <- sort(medias, decreasing = TRUE)
# Mostrar resultado
print(round(medias_ordenadas, 2))
maximo <- medias[which.max(medias)]
maximo
################################
# Calcular skewness
asimetria <- apply(minerales, 2, skewness)
# Calcular kurtosis
kurtosis <- apply(minerales, 2, kurtosis)
# Mostrar ordenado por simetría (más cercana a 0)
asimetria_ordenada <- sort(abs(asimetria))
print(asimetria_ordenada)
# Mostrar kurtosis
print(round(kurtosis, 2))
tabla <- data.frame(
Mineral = names(asimetria),
Skewness = round(asimetria, 3),
Kurtosis = round(kurtosis, 3)
)
# Mostrar tabla ordenada por skewness (más simétrica)
tabla[order(abs(tabla$Skewness)), ]
print(asimetria_ordenada)
mas_simetria <- asimetria{wich.min(asimetria)}
mas_simetria <- asimetria[wich.min(asimetria)]
mas_simetria <- asimetria[which.min(asimetria)]
mas_simetria
# Nombre del mineral más simétrico
nombre_mas_simetrico <- names(asimetria_ordenada)[1]
# Valor de skewness real (no absoluto)
valor_mas_simetrico <- asimetria[nombre_mas_simetrico]
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
minerales <- minerales[, -1]  # Elimina la primera columna
# Valor de skewness real (no absoluto)
valor_mas_simetrico <- asimetria[nombre_mas_simetrico]
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
minerales <- minerales[, -1]  # Elimina la primera columna
library(e1071)
minerales <- read.table("minerales.txt", header = TRUE)
head(minerales)
minerales <- minerales[, -1]  # Elimina la primera columna
# Ver estructura
str(minerales)
# Calcular la media de cada columna (cada mineral)
medias <- colMeans(minerales)
# Ordenar de mayor a menor
medias_ordenadas <- sort(medias, decreasing = TRUE)
# Mostrar resultado
print(round(medias_ordenadas, 2))
maximo <- medias[which.max(medias)]
maximo
################################
# Calcular skewness
asimetria <- apply(minerales, 2, skewness)
# Calcular kurtosis
kurtosis <- apply(minerales, 2, kurtosis)
# Mostrar ordenado por simetría (más cercana a 0)
asimetria_ordenada <- sort(abs(asimetria))
print(asimetria_ordenada)
# Nombre del mineral más simétrico
nombre_mas_simetrico <- names(asimetria_ordenada)[1]
# Valor de skewness real (no absoluto)
valor_mas_simetrico <- asimetria[nombre_mas_simetrico]
cat("El mineral más simétrico es:", nombre_mas_simetrico, "con skewness =", round(valor_mas_simetrico, 4), "\n")
# Mostrar kurtosis
print(round(kurtosis, 2))
tabla <- data.frame(
Mineral = names(asimetria),
Skewness = round(asimetria, 3),
Kurtosis = round(kurtosis, 3)
)
# Mostrar tabla ordenada por skewness (más simétrica)
tabla[order(abs(tabla$Skewness)), ]
# Mostrar kurtosis
print(round(kurtosis, 2))
# Mostrar tabla ordenada por skewness (más simétrica)
tabla[order(abs(tabla$Skewness)), ]
# Mostrar tabla ordenada por skewness (más simétrica)
tabla[order(abs(tabla$Skewness)), ]
library(readxl)
datos <- read_excel("indicador_banco.xlsx")
# Ver primeras filas
head(datos)
# Ver nombres de columnas
names(datos)
# Ver rango de fechas
range(datos$Dia)
datos$Dia <- as.Date(datos$Dia)
<- as.Date(datos$Dia)
library(readxl)
indicador_banco <- read_excel("indicador_banco.xlsx")
# Ver primeras filas
head(datos)
# Ver nombres de columnas
names(datos)
# Ver rango de fechas
range(datos$Dia)
datos$Dia <- as.Date(datos$Dia)
indicador_banco <- read_excel("indicador_banco.xlsx")
View(datos)
# Ver rango de fechas
range(indicador_banco$Dia)
indicador_banco$Dia <- as.Date(indicador_banco$Dia)
indicador_banco$Dia
rango_dolar <- range(datos$`Dólar observado`)
rango_euro  <- range(datos$`Euro observado`)
cat("Rango dólar:", diff(rango_dolar), "\n")
cat("Rango euro:", diff(rango_euro), "\n")
library(readxl)
indicador_banco <- read_excel("indicador_banco.xlsx")
# Ver primeras filas
head(indicador_banco)
# Ver nombres de columnas
names(indicador_banco)
# Ver rango de fechas
range(indicador_banco$Dia)
indicador_banco$Dia <- as.Date(indicador_banco$Dia)
rango_dolar <- range(datos$`Valor_Dolar`)
rango_euro  <- range(datos$`Valor_Euro`)
cat("Rango dólar:", diff(rango_dolar), "\n")
cat("Rango euro:", diff(rango_euro), "\n")
library(readxl)
# Leer desde la segunda fila (omitimos la primera fila duplicada de encabezado)
indicador_banco <- read_excel("indicador_banco.xlsx", skip = 1)
# Renombrar columnas correctamente
colnames(indicador_banco) <- c("Dia", "Valor_Dolar", "Valor_Euro")
# Convertir fechas al formato correcto
indicador_banco$Dia <- as.Date(indicador_banco$Dia)
rango_dolar <- range(indicador_banco$Valor_Dolar)
rango_euro  <- range(indicador_banco$Valor_Euro)
cat("Rango dólar:", diff(rango_dolar), "\n")
cat("Rango euro:", diff(rango_euro), "\n")
library(readxl)
# Leer desde la segunda fila (omitimos la primera fila duplicada de encabezado)
indicador_banco <- read_excel("indicador_banco.xlsx", skip = 1)
# Renombrar columnas correctamente
colnames(indicador_banco) <- c("Dia", "Valor_Dolar", "Valor_Euro")
# Convertir fechas al formato correcto
indicador_banco$Dia <- as.Date(indicador_banco$Dia)
rango_dolar <- range(indicador_banco$Valor_Dolar)
rango_euro  <- range(indicador_banco$Valor_Euro)
cat("Rango dólar:", diff(rango_dolar), "\n")
cat("Rango euro:", diff(rango_euro), "\n")
# Calcular rangos ignorando NA
rango_dolar <- range(indicador_banco$Valor_Dolar, na.rm = TRUE)
rango_euro  <- range(indicador_banco$Valor_Euro, na.rm = TRUE)
cat("Rango dólar:", diff(rango_dolar), "\n")
cat("Rango euro:", diff(rango_euro), "\n")
# Calcular desviaciones estándar (ignorando NA)
desv_dolar <- sd(indicador_banco$Valor_Dolar, na.rm = TRUE)
desv_euro  <- sd(indicador_banco$Valor_Euro, na.rm = TRUE)
cat("Desviación estándar del dólar:", round(desv_dolar, 4), "\n")
cat("Desviación estándar del euro:", round(desv_euro, 4), "\n")
# Función para calcular rachas de subidas y bajadas consecutivas
max_racha <- function(serie) {
cambios <- diff(serie)
subidas <- rle(cambios > 0)
bajadas <- rle(cambios < 0)
max_subida <- max(subidas$lengths[subidas$values], na.rm = TRUE)
max_bajada <- max(bajadas$lengths[bajadas$values], na.rm = TRUE)
return(list(max_subida = max_subida, max_bajada = max_bajada))
}
# Aplicar a ambas monedas
racha_dolar <- max_racha(indicador_banco$Valor_Dolar)
racha_euro  <- max_racha(indicador_banco$Valor_Euro)
cat("Dólar: mayor subida consecutiva =", racha_dolar$max_subida,
"días | bajada consecutiva =", racha_dolar$max_bajada, "días\n")
cat("Euro: mayor subida consecutiva =", racha_euro$max_subida,
"días | bajada consecutiva =", racha_euro$max_bajada, "días\n")
# Correlación entre ambas monedas
correlacion <- cor(indicador_banco$Valor_Dolar, indicador_banco$Valor_Euro, use = "complete.obs")
cat("Coeficiente de correlación:", round(correlacion, 4), "\n")
indicador_banco
rango_dolar
rango_euro
# Convertir fechas al formato correcto
indicador_banco$Dia <- as.Date(indicador_banco$Dia)
indicador_banco$Dia
cat("Euro: mayor subida consecutiva =", racha_euro$max_subida,
"días | bajada consecutiva =", racha_euro$max_bajada, "días\n")
cat("Dólar: mayor subida consecutiva =", racha_dolar$max_subida,
"días | bajada consecutiva =", racha_dolar$max_bajada, "días\n")
